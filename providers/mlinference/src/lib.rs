use serde::Deserialize;
use std::{collections::HashMap, sync::Arc};
use thiserror::Error as ThisError;
use wasmcloud_interface_mlinference::{InferenceOutput, MlError, Status, Tensor, ValueType};

mod bindle_loader;
pub use bindle_loader::{BindleLoader, ModelMetadata};

pub mod inference;

#[cfg(any(feature = "tflite", feature = "edgetpu"))]
pub use inference::TfLiteEngine;

pub use inference::{
    bytes_to_f32_vec, f32_array_to_bytes, ExecutionTarget, Graph, GraphEncoding,
    GraphExecutionContext, InferenceEngine, TractEngine,
};

mod settings;
pub use settings::{load_settings, ModelSettings};

mod hashmap_ci;
pub(crate) use hashmap_ci::make_case_insensitive;

pub type BindlePath = String;
pub type ModelName = String;
pub type ModelZoo = HashMap<ModelName, ModelContext>;
pub type Engine = Arc<Box<dyn InferenceEngine + Send + Sync>>;

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Hash)]
pub enum InferenceFramework {
    Tract,
    TfLite,
}

impl Default for InferenceFramework {
    fn default() -> Self {
        InferenceFramework::Tract
    }
}

#[derive(Clone, Debug, PartialEq, Deserialize)]
pub struct ModelContext {
    pub bindle_url: BindlePath,
    pub graph_encoding: GraphEncoding,
    pub execution_target: ExecutionTarget,
    pub value_type: ValueType,
    pub graph_execution_context: GraphExecutionContext,
    pub graph: Graph,
}

impl ModelContext {
    pub fn default() -> ModelContext {
        ModelContext {
            bindle_url: Default::default(),
            graph_encoding: Default::default(),
            execution_target: Default::default(),
            value_type: ValueType::ValueF32,
            graph_execution_context: Default::default(),
            graph: Default::default(),
        }
    }

    /// load metadata
    pub fn load_metadata(&mut self, metadata: ModelMetadata) -> Result<&ModelContext, MlError> {
        self.graph_encoding = metadata.graph_encoding;
        self.value_type =
            ValueType::try_from(metadata.tensor_type.as_str()).map_err(MlError::InvalidModel)?;
        self.execution_target = metadata.execution_target;

        Ok(self)
    }
}

/// generates an error default Status
pub fn get_result_status(ml_error_option: Option<MlError>) -> Status {
    match ml_error_option {
        Some(e) => Status::Error(e),
        None => Status::Success,
    }
}

/// generates an error default ResultStatus
pub fn get_default_inference_result(ml_error: Option<MlError>) -> InferenceOutput {
    InferenceOutput {
        result: get_result_status(ml_error),
        tensor: Tensor::default(),
    }
}

/// errors generated by this crate
#[derive(ThisError, Debug)]
pub enum Error {
    #[error("invalid parameter: {0}")]
    InvalidParameter(String),

    #[error("problem reading settings: {0}")]
    Settings(String),

    #[error("provider startup: {0}")]
    Init(String),
}

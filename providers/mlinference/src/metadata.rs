use serde::{Deserialize, Serialize};
use thiserror::Error as ThisError;

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct ModelMetadata {
    /// Model name (optional)
    #[serde(default)]
    pub model_name: Option<String>,
    
    /// graph encoding
    #[serde(default)]
    pub graph_encoding: String,
    
    /// execution target
    #[serde(default)]
    pub execution_target: String,
    
    /// tensor type
    #[serde(default)]
    pub tensor_type: String,
    
    /// tensor dimensions in (optional)
    #[serde(default)]
    pub tensor_dimensions_in: Option<Vec<u32>>,
    
    /// tensor dimensions out (optional)
    #[serde(default)]
    pub tensor_dimensions_out: Option<Vec<u32>>
}

impl ModelMetadata {
    /// load metadata from json
    pub fn from_json(data: &[u8]) -> Result<Self, Error> {
        serde_json::from_slice(data).map_err(|e| Error::InvalidParameter(format!("invalid json: {}", e)))
    }
}

/// errors generated by this crate
#[derive(ThisError, Debug)]
pub enum Error {
    #[error("invalid parameter: {0}")]
    InvalidParameter(String),
}